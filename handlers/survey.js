const storage = require('../database/storage');
const messages = require('./messages');
const keyboards = require('./keyboards');

const STEPS = {
  START: 'start',
  REQUEST_CONTACT: 'request_contact',
  ABOUT: 'about',
  SOCIABILITY: 'sociability',
  CITY: 'city',
  DONE: 'done'
};

class Survey {
  handleStart(bot, chatId, userId, userInfo) {
    storage.saveCandidate(userId, { 
      step: STEPS.START, 
      chatId: chatId,
      username: userInfo.username || null,
      phone: userInfo.phone || null,
      startedAt: new Date().toISOString(),
      status: 'started'
    });

    console.log('üîÑ –ù–æ–≤—ã–π –∫–∞–Ω–¥–∏–¥–∞—Ç —Å–æ–∑–¥–∞–Ω');

    if (!userInfo.username && !userInfo.phone) {
      storage.updateCandidateField(userId, 'step', STEPS.REQUEST_CONTACT);
      bot.sendMessage(chatId, '–î–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è, –±—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É.', keyboards.requestContact);
    } else {
      storage.updateCandidateField(userId, 'step', STEPS.ABOUT);
      bot.sendMessage(chatId, messages.welcome, keyboards.experience);
    }
  }

  handleContact(bot, msg) {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const phone = msg.contact.phone_number;

    storage.updateCandidateField(userId, 'phone', phone);
    storage.updateCandidateField(userId, 'step', STEPS.ABOUT);
    bot.sendMessage(chatId, messages.welcome, keyboards.experience);
  }

  handleMessage(bot, msg) {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const text = msg.text;

    console.log('üîç handleMessage –≤—ã–∑–≤–∞–Ω');
    console.log('üìù –¢–µ–∫—Å—Ç:', text);
    console.log('üë§ UserID:', userId);

    if (msg.contact) {
      console.log('üìû –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç');
      this.handleContact(bot, msg);
      return;
    }

    const candidate = storage.getCandidate(userId);
    console.log('üíæ –ö–∞–Ω–¥–∏–¥–∞—Ç –∏–∑ –ë–î:', candidate ? '–Ω–∞–π–¥–µ–Ω' : '–Ω–µ –Ω–∞–π–¥–µ–Ω');
    
    if (!candidate) {
      console.log('‚ö†Ô∏è –ö–∞–Ω–¥–∏–¥–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ');
      const userInfo = {
        username: msg.from.username,
        phone: msg.contact ? msg.contact.phone_number : null
      };
      this.handleStart(bot, chatId, userId, userInfo);
      return;
    }

    const step = candidate.step;
    console.log('üìç –¢–µ–∫—É—â–∏–π —à–∞–≥:', step);

    switch (step) {
      case STEPS.REQUEST_CONTACT:
        bot.sendMessage(chatId, '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞.', keyboards.requestContact);
        break;
      case STEPS.ABOUT:
        this.handleAboutResponse(bot, chatId, userId, text);
        break;
      case STEPS.SOCIABILITY:
        this.handleSociabilityResponse(bot, chatId, userId, text);
        break;
      case STEPS.CITY:
        this.handleCityResponse(bot, chatId, userId, text);
        break;
    }
  }

  handleAboutResponse(bot, chatId, userId, text) {
    console.log('‚úÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ');
    
    if (text === '–Ñ –¥–æ—Å–≤—ñ–¥' || text === '–ù–µ–º–∞—î –¥–æ—Å–≤—ñ–¥—É') {
      storage.updateCandidateField(userId, 'experience', text);
      storage.updateCandidateField(userId, 'about', text);
    } else {
      storage.updateCandidateField(userId, 'about', text);
    }
    
    storage.updateCandidateField(userId, 'step', STEPS.SOCIABILITY);
    bot.sendMessage(chatId, messages.sociability, keyboards.sociability);
  }

  handleSociabilityResponse(bot, chatId, userId, text) {
    console.log('‚úÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—â–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å');
    storage.updateCandidateField(userId, 'sociability', text);
    storage.updateCandidateField(userId, 'step', STEPS.CITY);
    bot.sendMessage(chatId, messages.city, keyboards.remove);
  }

  handleCityResponse(bot, chatId, userId, text) {
    console.log('‚úÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ—Ä–æ–¥');
    storage.updateCandidateField(userId, 'city', text);
    storage.updateCandidateField(userId, 'step', STEPS.DONE);
    storage.updateCandidateField(userId, 'status', 'completed');
    storage.updateCandidateField(userId, 'completedAt', new Date().toISOString());
    
    bot.sendMessage(chatId, messages.completed, keyboards.remove);
    this.notifyAdmin(bot, userId);
  }

  notifyAdmin(bot, userId) {
    const config = require('../config');
    const candidate = storage.getCandidate(userId);
    
    const report = `
üÜï –ù–æ–≤–∞ –∞–Ω–∫–µ—Ç–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞!

üìù –ü—Ä–æ —Å–µ–±–µ —Ç–∞ –¥–æ—Å–≤—ñ–¥: ${candidate.about}
üí¨ –†—ñ–≤–µ–Ω—å —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è: ${candidate.sociability}/5
üèô –ú—ñ—Å—Ç–æ: ${candidate.city}

Telegram: ${candidate.username ? '@' + candidate.username : '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'}
${candidate.phone ? 'üì± –¢–µ–ª–µ—Ñ–æ–Ω: ' + candidate.phone : ''}
ID: ${userId}
    `;
    
    bot.sendMessage(config.ADMIN_CHAT_ID, report);
  }
}

module.exports = new Survey();